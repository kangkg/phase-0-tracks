## In the solo_project directory, create a file called queries.txt. For each SQL query you run, paste both the command and the output (if any) into queries.txt.
## Run a SQL query for each of the following:

## Display the information in one table (either table is fine).
SELECT * FROM workers;

1|Jon Mon|11|1
2|Daisy Hazy|551|2
3|Bon Don|232|3


## Update an item that meets some condition (you can choose a condition that makes sense).
SELECT * FROM workers, managers WHERE workers.boss_id = managers.id;

1|Jon Mon the Second|11|1
2|Daisy Hazy|551|2
3|Bon Don|232|3


## Display the information in both tables using one query.
SELECT * FROM workers, managers WHERE workers.boss_id = managers.id;

1|Jon Mon the Second|11|1|1|Overlord Of All Humans|Evil United|true
2|Daisy Hazy|551|2|2|Trogdor the Burninator|Dance Party Ltd.|false
3|Bon Don|232|3|3|Normal John|Banana Republika|false


## Display a narrower selection of columns (fewer columns than all of them, in other words) from both tables using one query.
SELECT workers.name, managers.name FROM workers JOIN managers ON workers.boss_id = managers.id;

Jon Mon the Second|Overlord Of All Humans
Daisy Hazy|Trogdor the Burninator
Bon Don|Normal John

## Delete an item that meets some condition (you can choose a condition that makes sense).
DELETE FROM workers WHERE name="Bon Don";

1|Jon Mon the Second|11|1
2|Daisy Hazy|551|2


## There are lots of different kinds of joins. What are they? Can you apply different conditions to a join to change what's displayed? Can you bookmark any good diagrams that will help you tell different joins apart in the future?
Try a few different joins in your database, and record the commands and the output in queries.txt.

There are left outer, right outer, natural, center, and others. (http://stackoverflow.com/questions/17946221/sql-join-and-different-types-of-joins). Some will show all rows, even if they don't have a matching join-id. 

select workers.id, workers.name, managers.name FROM workers
INNER JOIN managers 
ON workers.boss_id = managers.id;


//////////////////////////////////////////////// 8.4 ////////////////////////////

INSERT INTO businesses (name) VALUES ("Lotus Yoga");
INSERT INTO businesses (name) VALUES ("Sushi World");
INSERT INTO businesses (name) VALUES ("Plumbing by Janet");

INSERT INTO users (first_name, last_name) VALUES ("Bradford", "Pitt");
INSERT INTO users (first_name, last_name) VALUES ("Mandy", "Kaling");
INSERT INTO users (first_name, last_name) VALUES ("Angela", "Jolie");

//

CREATE TABLE reviews (
  id INTEGER PRIMARY KEY,
  stars INT,
  comment VARCHAR(255),
  business_id INT,
  user_id INT, 
  FOREIGN KEY (business_id) REFERENCES businesses(id),
  FOREIGN KEY (user_id) REFERENCES users(id)
);

// Populate your reviews table with a few pieces of data. You'll need to provide valid integers for both of the foreign keys (one valid id of a user, and one valid id of a business). An example review might consist of 5 stars, the text "great food!", a business ID of 1, and a user ID of 1 (provided you have a business with a primary key of 1 and a user with a primary key of 1).

INSERT INTO reviews (stars, comment, business_id, user_id) VALUES (4, "Awesome!!", 1, 2);
INSERT INTO reviews (stars, comment, business_id, user_id) VALUES (1, "Nope!!", 2, 3);
INSERT INTO reviews (stars, comment, business_id, user_id) VALUES (5, "THE BEST!!", 1, 1);
INSERT INTO reviews (stars, comment, business_id, user_id) VALUES (null, null, null, 3);

